#define STB_IMAGE_IMPLEMENTATION

#include <stdio.h>
#include <string.h>
#include <cmath>
#include <vector>

#include <GL/glew.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>

#include "Window.h"
#include "Mesh.h"
#include "Shader.h"
#include "Camera.h"
#include "Texture.h"
#include "Light.h"

const float toRadians = 3.14159265f / 180.0f;

Window mainWindow;
std::vector<Mesh*> plane_mesh, trolley_mesh, rail_mesh;
std::vector<Shader> shaderList;
Camera camera;

Texture diamond, dirt, trolley, rail;

DirectionalLight dLight(1.0f, 1.0f, 1.0f, 0.5f, 0.8f, 1.0f);

GLfloat deltaTime = 0.0f;
GLfloat lastTime = 0.0f;

// Vertex Shader
static const char* vShader = "Shaders/shader.vert";

// Fragment Shader
static const char* fShader = "Shaders/shader.frag";

void LoadMesh(aiMesh* mesh, const aiScene* scene, std::vector<Mesh*>& meshList) {
    std::vector<float> vertices;
    std::vector<unsigned int> indices;

    for (size_t i = 0; i < mesh->mNumVertices; i++) {
        vertices.insert(vertices.end(), { mesh->mVertices[i].x, mesh->mVertices[i].y, mesh->mVertices[i].z });
        if (mesh->mTextureCoords[0]) {
            vertices.insert(vertices.end(), { mesh->mTextureCoords[0][i].x, mesh->mTextureCoords[0][i].y });
        }
        else {
            vertices.insert(vertices.end(), { 0.0f, 0.0f });
        }
        vertices.insert(vertices.end(), { mesh->mNormals[i].x, mesh->mNormals[i].y, mesh->mNormals[i].z });
    }

    for (size_t i = 0; i < mesh->mNumFaces; i++) {
        aiFace face = mesh->mFaces[i];
        for (size_t j = 0; j < face.mNumIndices; j++) {
            indices.push_back(face.mIndices[j]);
        }
    }

    Mesh* newMesh = new Mesh();
    newMesh->CreateMesh(&vertices[0], &indices[0], vertices.size(), indices.size());
    meshList.push_back(newMesh);
}

void LoadNode(aiNode* node, const aiScene* scene, std::vector<Mesh*>& meshList) {
    for (size_t i = 0; i < node->mNumMeshes; i++) {
        LoadMesh(scene->mMeshes[node->mMeshes[i]], scene, meshList);
    }

    for (size_t i = 0; i < node->mNumChildren; i++) {
        LoadNode(node->mChildren[i], scene, meshList);
    }
}

void LoadModel(const std::string& filePath, std::vector<Mesh*>& meshList) {
    Assimp::Importer importer;
    const aiScene* scene = importer.ReadFile(filePath, aiProcess_Triangulate | aiProcess_FlipUVs | aiProcess_JoinIdenticalVertices);
    if (!scene) {
        printf("Model (%s) failed to load: %s", filePath, importer.GetErrorString());
        return;
    }

    LoadNode(scene->mRootNode, scene, meshList);
}

void CreateObjects() {
    unsigned int indices0[] = {
        0, 1, 2,
        0, 2, 3,
    };

    GLfloat vertices0[] = {
        // x      y      z      u     v     nx    ny    nz
        -20.0f,  0.0f, -20.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f,
        -20.0f,  0.0f, 20.0f,  1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
        20.0f,   0.0f, 20.0f,  1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
        20.0f,   0.0f, -20.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f,
    };

    Mesh* obj1 = new Mesh();
    obj1->CreateMesh(vertices0, indices0, 32, 6);
    plane_mesh.push_back(obj1);
}

void CreateShaders() {
    Shader* shader1 = new Shader();
    shader1->CreateFromFiles(vShader, fShader);
    shaderList.push_back(*shader1);
}

int main() {
    mainWindow = Window(800, 600);
    mainWindow.Initialise();

    CreateObjects();
    CreateShaders();

    LoadModel("D:/Docs/Visual Studio/Trolley Problem/OpenGLCourseApp/Obj/trolley_body.obj", trolley_mesh);
    LoadModel("D:/Docs/Visual Studio/Trolley Problem/OpenGLCourseApp/Obj/wheel1.obj", trolley_mesh);
    LoadModel("D:/Docs/Visual Studio/Trolley Problem/OpenGLCourseApp/Obj/wheel2.obj", trolley_mesh);
    LoadModel("D:/Docs/Visual Studio/Trolley Problem/OpenGLCourseApp/Obj/wheel3.obj", trolley_mesh);
    LoadModel("D:/Docs/Visual Studio/Trolley Problem/OpenGLCourseApp/Obj/wheel4.obj", trolley_mesh);
    LoadModel("D:/Docs/Visual Studio/Trolley Problem/OpenGLCourseApp/Obj/wheel5.obj", trolley_mesh);
    LoadModel("D:/Docs/Visual Studio/Trolley Problem/OpenGLCourseApp/Obj/wheel6.obj", trolley_mesh);

    LoadModel("D:/Docs/Visual Studio/Trolley Problem/OpenGLCourseApp/Obj/rail1.obj", rail_mesh);
    
    camera = Camera(glm::vec3(0.0f, 10.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f), 0.0f, 0.0f, 5.0f, 0.2f);

    diamond = Texture("Textures/diamond.jpg");
    dirt = Texture("Textures/dirt.jpg");
    trolley = Texture("Textures/trolley.jpg");
    rail = Texture("Textures/rail.jpg");

    diamond.LoadTexture();
    dirt.LoadTexture();
    trolley.LoadTexture();
    rail.LoadTexture();

    GLuint uniformProjection = 0, uniformModel = 0, uniformView = 0, uniformAmbientIntensity = 0,
        uniformAmbientColour = 0, uniformDiffuseIntensity = 0, uniformSpecularIntensity = 0, uniformLightDirection = 0;
    glm::mat4 projection = glm::perspective(glm::radians(45.0f), (GLfloat)mainWindow.getBufferWidth() / mainWindow.getBufferHeight(), 0.1f, 100.0f);

    // Loop until window closed
    while (!mainWindow.getShouldClose()) {
        GLfloat now = glfwGetTime();
        deltaTime = now - lastTime;
        lastTime = now;

        // Get + Handle User Input
        glfwPollEvents();

        camera.keyControl(mainWindow.getsKeys(), deltaTime);
        camera.mouseControl(mainWindow.getXChange(), mainWindow.getYChange());

        // Clear the window
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        shaderList[0].UseShader();
        uniformModel = shaderList[0].GetModelLocation();
        uniformProjection = shaderList[0].GetProjectionLocation();
        uniformView = shaderList[0].GetViewLocation();
        uniformAmbientColour = shaderList[0].GetAmbientColourLocation();
        uniformAmbientIntensity = shaderList[0].GetAmbientIntensityLocation();
        uniformDiffuseIntensity = shaderList[0].GetDiffuseIntensityLocation();
        uniformSpecularIntensity = shaderList[0].GetSpecularIntensityLocation();
        uniformLightDirection = shaderList[0].GetLightDirectionLocation();

        dLight.UseDirLight(uniformAmbientIntensity, uniformAmbientColour,
            uniformDiffuseIntensity, uniformSpecularIntensity, uniformLightDirection);

        glm::mat4 model(1.0f);

        glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
        glUniformMatrix4fv(uniformProjection, 1, GL_FALSE, glm::value_ptr(projection));
        glUniformMatrix4fv(uniformView, 1, GL_FALSE, glm::value_ptr(camera.calculateViewMatrix()));

        // Plane
        model = glm::mat4(1.0f);
        model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
        glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
        dirt.UseTexture();
        plane_mesh[0]->RenderMesh();

        // Trolley
        for (size_t i = 0; i < trolley_mesh.size(); i++) {
            model = glm::mat4(1.0f);
            model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
            model = glm::translate(model, glm::vec3(0.0f, 0.9f, 0.0f));
            glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
            trolley.UseTexture();
            trolley_mesh[i]->RenderMesh();
        }

        // Rail
        for (size_t i = 0; i < rail_mesh.size(); i++) {
            model = glm::mat4(1.0f);
            model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
            glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
            rail.UseTexture();
            rail_mesh[i]->RenderMesh();
        }

        glUseProgram(0);

        mainWindow.swapBuffers();
    }

    return 0;
}